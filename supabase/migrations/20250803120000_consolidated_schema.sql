-- EventPay: 統合スキーマ定義
-- 目的: アプリケーションの全ての型、テーブル、ビュー、RLSポリシー、関数を統合定義する。

-- ====================================================================
-- 1. ENUM型定義
-- ====================================================================
CREATE TYPE public.event_status_enum AS ENUM ('upcoming', 'ongoing', 'past', 'cancelled');
CREATE TYPE public.payment_method_enum AS ENUM ('stripe', 'cash');
CREATE TYPE public.payment_status_enum AS ENUM ('pending', 'paid', 'failed', 'received', 'completed', 'refunded', 'waived');
CREATE TYPE public.attendance_status_enum AS ENUM ('attending', 'not_attending', 'maybe');
CREATE TYPE public.stripe_account_status_enum AS ENUM ('unverified', 'onboarding', 'verified', 'restricted');
CREATE TYPE public.payout_status_enum AS ENUM ('pending', 'processing', 'completed', 'failed');

COMMENT ON TYPE public.payment_status_enum IS '決済状況 (completedは無料イベント用)';

-- ====================================================================
-- 2. テーブル定義
-- ====================================================================

-- users: 運営者情報 (Supabase auth.usersと同期)
CREATE TABLE public.users (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- events: イベント情報
CREATE TABLE public.events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_by UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    date TIMESTAMP WITH TIME ZONE NOT NULL,
    location VARCHAR(500),
    fee INTEGER NOT NULL DEFAULT 0 CHECK (fee >= 0),
    capacity INTEGER CHECK (capacity IS NULL OR capacity > 0),
    description TEXT,
    registration_deadline TIMESTAMP WITH TIME ZONE,
    payment_deadline TIMESTAMP WITH TIME ZONE,
    payment_methods public.payment_method_enum[] NOT NULL CHECK (array_length(payment_methods, 1) > 0),
    invite_token VARCHAR(255) UNIQUE,
    status public.event_status_enum NOT NULL DEFAULT 'upcoming',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    CONSTRAINT events_date_after_creation CHECK (date > created_at),
    CONSTRAINT events_registration_deadline_before_event CHECK (registration_deadline IS NULL OR registration_deadline < date),
    CONSTRAINT events_payment_deadline_before_event CHECK (payment_deadline IS NULL OR payment_deadline < date),
    CONSTRAINT events_payment_deadline_after_registration CHECK (payment_deadline IS NULL OR registration_deadline IS NULL OR payment_deadline >= registration_deadline)
);
ALTER TABLE public.events ENABLE ROW LEVEL SECURITY;

-- attendances: イベントへの出欠情報
-- 注意: guest_tokenは明示的にNOT NULLで、デフォルト値なし（アプリケーション側で生成）
CREATE TABLE public.attendances (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id UUID NOT NULL REFERENCES public.events(id) ON DELETE CASCADE,
    nickname VARCHAR(50) NOT NULL CHECK (LENGTH(TRIM(nickname)) >= 1),
    email VARCHAR(255) NOT NULL CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
    status public.attendance_status_enum NOT NULL,
    guest_token VARCHAR(32) UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);
ALTER TABLE public.attendances ENABLE ROW LEVEL SECURITY;
CREATE UNIQUE INDEX attendances_event_email_unique ON public.attendances(event_id, email);
COMMENT ON COLUMN public.attendances.guest_token IS 'Guest access token generated by application (Base64 format, 32 characters)';

-- payments: 決済情報
-- 注意: Stripe決済でpending状態の場合はpayment_intent_idが不要になるよう制約を緩和
CREATE TABLE public.payments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    attendance_id UUID NOT NULL UNIQUE REFERENCES public.attendances(id) ON DELETE CASCADE,
    method public.payment_method_enum NOT NULL,
    amount INTEGER NOT NULL CHECK (amount >= 0), -- 0円を許容 (無料イベント用)
    status public.payment_status_enum NOT NULL DEFAULT 'pending',
    stripe_payment_intent_id VARCHAR(255) UNIQUE,
    webhook_event_id VARCHAR(100), -- 冪等性確保用
    webhook_processed_at TIMESTAMP WITH TIME ZONE,
    paid_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    CONSTRAINT payments_stripe_intent_required CHECK (
        (method = 'stripe' AND status = 'pending') OR
        (method = 'stripe' AND status != 'pending' AND stripe_payment_intent_id IS NOT NULL) OR
        (method != 'stripe')
    ),
    CONSTRAINT payments_paid_at_when_completed CHECK ((status IN ('paid', 'received', 'completed') AND paid_at IS NOT NULL) OR (status NOT IN ('paid', 'received', 'completed')))
);
ALTER TABLE public.payments ENABLE ROW LEVEL SECURITY;

-- stripe_connect_accounts: Stripe Connectアカウント情報
CREATE TABLE public.stripe_connect_accounts (
    user_id UUID PRIMARY KEY REFERENCES public.users(id) ON DELETE CASCADE,
    stripe_account_id VARCHAR(255) UNIQUE NOT NULL,
    status public.stripe_account_status_enum NOT NULL DEFAULT 'unverified',
    charges_enabled BOOLEAN NOT NULL DEFAULT FALSE,
    payouts_enabled BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);
ALTER TABLE public.stripe_connect_accounts ENABLE ROW LEVEL SECURITY;

-- payouts: 運営者への売上送金履歴
CREATE TABLE public.payouts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    event_id UUID NOT NULL REFERENCES public.events(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    total_stripe_sales INTEGER NOT NULL DEFAULT 0,
    total_stripe_fee INTEGER NOT NULL DEFAULT 0, -- Stripe手数料
    platform_fee INTEGER NOT NULL DEFAULT 0,
    net_payout_amount INTEGER NOT NULL DEFAULT 0,
    status public.payout_status_enum NOT NULL DEFAULT 'pending',
    stripe_transfer_id VARCHAR(255) UNIQUE,
    webhook_event_id VARCHAR(100), -- 冪等性確保用
    webhook_processed_at TIMESTAMP WITH TIME ZONE,
    processed_at TIMESTAMP WITH TIME ZONE,
    notes TEXT, -- 管理用メモ
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    CONSTRAINT payouts_amounts_non_negative CHECK (total_stripe_sales >= 0 AND total_stripe_fee >= 0 AND platform_fee >= 0 AND net_payout_amount >= 0),
    CONSTRAINT payouts_calculation_valid CHECK (net_payout_amount = total_stripe_sales - total_stripe_fee - platform_fee)
);
ALTER TABLE public.payouts ENABLE ROW LEVEL SECURITY;

-- invite_links: イベント招待リンク
CREATE TABLE public.invite_links (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  event_id UUID NOT NULL REFERENCES public.events(id) ON DELETE CASCADE,
  token TEXT UNIQUE NOT NULL,
  expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
  max_uses INTEGER, -- NULL = 無制限
  current_uses INTEGER DEFAULT 0,
  created_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
ALTER TABLE public.invite_links ENABLE ROW LEVEL SECURITY;

-- システムログテーブル
CREATE TABLE IF NOT EXISTS public.system_logs (
    id BIGSERIAL PRIMARY KEY,
    operation_type VARCHAR(50) NOT NULL,
    details JSONB,
    executed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);
ALTER TABLE public.system_logs ENABLE ROW LEVEL SECURITY;

-- セキュリティ監査ログテーブル
CREATE TABLE IF NOT EXISTS public.security_audit_log (
    id BIGSERIAL PRIMARY KEY,
    event_type TEXT NOT NULL,
    user_role TEXT,
    ip_address INET,
    details JSONB,
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
ALTER TABLE public.security_audit_log ENABLE ROW LEVEL SECURITY;

-- ====================================================================
-- 3. インデックス作成
-- ====================================================================
CREATE INDEX idx_events_created_by ON public.events(created_by);
CREATE INDEX idx_events_status ON public.events(status);
CREATE INDEX idx_attendances_event_id ON public.attendances(event_id);
CREATE INDEX idx_payments_status ON public.payments(status);
CREATE INDEX idx_payouts_user_id ON public.payouts(user_id);
CREATE INDEX idx_invite_links_token ON public.invite_links(token);

-- ====================================================================
-- 4. ビューと安全な関数
-- ====================================================================
-- public_profiles: 個人情報を保護しつつ、必要な情報のみを公開するビュー
CREATE OR REPLACE VIEW public.public_profiles AS SELECT id, name, created_at FROM public.users;
GRANT SELECT ON public.public_profiles TO authenticated, service_role;

-- get_event_creator_name: イベント作成者名を安全に取得する関数
CREATE OR REPLACE FUNCTION public.get_event_creator_name(p_creator_id UUID)
RETURNS TEXT LANGUAGE plpgsql SECURITY DEFINER STABLE AS $$
BEGIN
    RETURN (SELECT name FROM public.users WHERE id = p_creator_id);
END;
$$;
GRANT EXECUTE ON FUNCTION public.get_event_creator_name(UUID) TO authenticated, service_role;

-- ====================================================================
-- 5. 関数とトリガー
-- ====================================================================
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER LANGUAGE plpgsql AS $$
BEGIN NEW.updated_at = NOW(); RETURN NEW; END;
$$;

CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON public.users FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_events_updated_at BEFORE UPDATE ON public.events FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_attendances_updated_at BEFORE UPDATE ON public.attendances FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_payments_updated_at BEFORE UPDATE ON public.payments FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_stripe_connect_accounts_updated_at BEFORE UPDATE ON public.stripe_connect_accounts FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_payouts_updated_at BEFORE UPDATE ON public.payouts FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_invite_links_updated_at BEFORE UPDATE ON public.invite_links FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

CREATE OR REPLACE FUNCTION public.check_attendance_capacity_limit()
RETURNS TRIGGER LANGUAGE plpgsql AS $$
DECLARE event_capacity INTEGER; current_attending_count INTEGER;
BEGIN
    IF NEW.status = 'attending' THEN
        SELECT capacity INTO event_capacity FROM public.events WHERE id = NEW.event_id;
        IF event_capacity IS NOT NULL THEN
            SELECT COUNT(*) INTO current_attending_count FROM public.attendances WHERE event_id = NEW.event_id AND status = 'attending';
            IF current_attending_count >= event_capacity THEN RAISE EXCEPTION 'イベントの定員（%名）に達しています。', event_capacity; END IF;
        END IF;
    END IF;
    RETURN NEW;
END;
$$;

CREATE TRIGGER check_attendance_capacity_before_insert_or_update
BEFORE INSERT OR UPDATE ON public.attendances FOR EACH ROW EXECUTE FUNCTION public.check_attendance_capacity_limit();

-- ユーザープロファイル自動作成関数
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  -- auth.usersからのメタデータを使用してpublic.usersにプロファイルを作成
  INSERT INTO public.users (id, name)
  VALUES (
    NEW.id,
    COALESCE(NEW.raw_user_meta_data->>'name', 'ユーザー')
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- トリガーの作成
-- auth.usersテーブルにレコードが挿入された後、自動的にpublic.usersにプロファイルを作成
CREATE OR REPLACE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- セキュリティ設定
-- 関数の実行権限を適切に設定（supabase_auth_adminのみ実行可能）
GRANT EXECUTE ON FUNCTION public.handle_new_user() TO supabase_auth_admin;
REVOKE EXECUTE ON FUNCTION public.handle_new_user() FROM authenticated, anon, public;

-- コメント追加（public.usersテーブルの関数のみ）
COMMENT ON FUNCTION public.handle_new_user() IS
'auth.usersテーブルに新しいユーザーが作成された際に、自動的にpublic.usersテーブルにプロファイルレコードを作成する関数';

-- ゲスト参加状況更新のためのストアドプロシージャ
CREATE OR REPLACE FUNCTION update_guest_attendance_with_payment(
  p_attendance_id UUID,
  p_status public.attendance_status_enum,
  p_payment_method public.payment_method_enum DEFAULT NULL,
  p_event_fee INTEGER DEFAULT 0
)
RETURNS VOID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  v_event_id UUID;
  v_payment_id UUID;
  v_current_status public.attendance_status_enum;
BEGIN
  -- 参加記録の存在確認と現在のステータス取得
  SELECT event_id, status INTO v_event_id, v_current_status
  FROM attendances
  WHERE id = p_attendance_id;

  IF NOT FOUND THEN
    RAISE EXCEPTION 'Attendance record not found';
  END IF;

  -- 参加ステータスを更新
  UPDATE attendances
  SET
    status = p_status,
    updated_at = NOW()
  WHERE id = p_attendance_id;

  -- 決済レコードの処理
  IF p_status = 'attending' AND p_event_fee > 0 AND p_payment_method IS NOT NULL THEN
    -- 既存の決済レコードを確認
    SELECT id INTO v_payment_id
    FROM payments
    WHERE attendance_id = p_attendance_id;

    IF v_payment_id IS NOT NULL THEN
      -- 既存の決済レコードを更新
      UPDATE payments
      SET
        method = p_payment_method,
        amount = p_event_fee,
        status = 'pending',
        updated_at = NOW()
      WHERE id = v_payment_id;
    ELSE
      -- 新しい決済レコードを作成
      INSERT INTO payments (
        attendance_id,
        amount,
        method,
        status,
        created_at,
        updated_at
      ) VALUES (
        p_attendance_id,
        p_event_fee,
        p_payment_method,
        'pending',
        NOW(),
        NOW()
      );
    END IF;
  ELSIF p_status != 'attending' THEN
    -- 参加しない場合は決済レコードを削除
    DELETE FROM payments WHERE attendance_id = p_attendance_id;
  END IF;

  -- 成功時はコミット（トランザクション内で実行される）
  RETURN;
END;
$$;

-- 参加登録のためのストアドプロシージャ
CREATE OR REPLACE FUNCTION public.register_attendance_with_payment(
  p_event_id UUID,
  p_nickname VARCHAR,
  p_email VARCHAR,
  p_status public.attendance_status_enum,
  p_guest_token VARCHAR,
  p_payment_method public.payment_method_enum DEFAULT NULL,
  p_event_fee INTEGER DEFAULT 0
)
RETURNS UUID -- 新しく作成されたattendanceのIDを返す
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  v_attendance_id UUID;
  v_event_exists BOOLEAN;
BEGIN
  -- 入力パラメータの検証
  IF p_event_id IS NULL THEN
    RAISE EXCEPTION 'Event ID cannot be null';
  END IF;

  IF p_nickname IS NULL OR LENGTH(TRIM(p_nickname)) = 0 THEN
    RAISE EXCEPTION 'Nickname cannot be null or empty';
  END IF;

  IF p_email IS NULL OR LENGTH(TRIM(p_email)) = 0 THEN
    RAISE EXCEPTION 'Email cannot be null or empty';
  END IF;

  IF p_status IS NULL THEN
    RAISE EXCEPTION 'Status cannot be null';
  END IF;

  IF p_guest_token IS NULL OR LENGTH(p_guest_token) != 32 THEN
    RAISE EXCEPTION 'Guest token must be exactly 32 characters long, got: %', COALESCE(LENGTH(p_guest_token), 0);
  END IF;

  -- イベントの存在確認と定員チェック（排他ロック付き）
  SELECT EXISTS(SELECT 1 FROM public.events WHERE id = p_event_id FOR UPDATE) INTO v_event_exists;
  IF NOT v_event_exists THEN
    RAISE EXCEPTION 'Event with ID % does not exist', p_event_id;
  END IF;

  -- 定員チェック（attending状態の場合のみ）
  IF p_status = 'attending' THEN
    DECLARE
      v_capacity INTEGER;
      v_current_attendees INTEGER;
    BEGIN
      -- イベントの定員を取得
      SELECT capacity INTO v_capacity FROM public.events WHERE id = p_event_id;

      -- 定員が設定されている場合のみチェック
      IF v_capacity IS NOT NULL THEN
        -- 現在の参加者数を取得（排他ロック付き）
        SELECT COUNT(*) INTO v_current_attendees
        FROM public.attendances
        WHERE event_id = p_event_id AND status = 'attending'
        FOR UPDATE;

        -- 定員超過チェック
        IF v_current_attendees >= v_capacity THEN
          RAISE EXCEPTION 'Event capacity (%) has been reached. Current attendees: %', v_capacity, v_current_attendees;
        END IF;
      END IF;
    END;
  END IF;

  -- ゲストトークンの重複チェック
  IF EXISTS(SELECT 1 FROM public.attendances WHERE guest_token = p_guest_token) THEN
    RAISE EXCEPTION 'Guest token already exists: %', LEFT(p_guest_token, 8) || '...';
  END IF;

  -- 1. attendancesテーブルに参加記録を挿入
  BEGIN
    INSERT INTO public.attendances (event_id, nickname, email, status, guest_token)
    VALUES (p_event_id, p_nickname, p_email, p_status, p_guest_token)
    RETURNING id INTO v_attendance_id;

    -- 挿入が成功したかを確認
    IF v_attendance_id IS NULL THEN
      RAISE EXCEPTION 'Failed to insert attendance record';
    END IF;

  EXCEPTION
    WHEN unique_violation THEN
      -- 重複エラーの詳細を提供
      IF SQLSTATE = '23505' AND CONSTRAINT_NAME = 'attendances_guest_token_key' THEN
        RAISE EXCEPTION 'Guest token already exists (unique constraint violation): %', LEFT(p_guest_token, 8) || '...';
      ELSE
        RAISE EXCEPTION 'Unique constraint violation: %', SQLERRM;
      END IF;
    WHEN OTHERS THEN
      RAISE EXCEPTION 'Failed to insert attendance: %', SQLERRM;
  END;

  -- 2. 参加ステータスが'attending'で、イベントが有料の場合、paymentsテーブルに決済記録を挿入
  IF p_status = 'attending' AND p_event_fee > 0 AND p_payment_method IS NOT NULL THEN
    BEGIN
      INSERT INTO public.payments (attendance_id, amount, method, status)
      VALUES (v_attendance_id, p_event_fee, p_payment_method, 'pending');
    EXCEPTION
      WHEN OTHERS THEN
        -- 決済記録の挿入に失敗した場合、参加記録も削除してロールバック
        DELETE FROM public.attendances WHERE id = v_attendance_id;
        RAISE EXCEPTION 'Failed to insert payment record: %', SQLERRM;
    END;
  END IF;

  RETURN v_attendance_id;
END;
$$;

-- テスト用テーブルのクリーンアップ関数 (開発環境専用)
CREATE OR REPLACE FUNCTION public.cleanup_test_tables_dev_only()
RETURNS VOID LANGUAGE plpgsql SECURITY INVOKER AS $$
BEGIN
    -- 警告: この関数は開発環境専用です。本番環境で実行しないでください。
    RAISE WARNING 'Executing development-only cleanup function. This should not be run in production.';

    DELETE FROM public.payouts;
    DELETE FROM public.payments;
    DELETE FROM public.attendances;
    DELETE FROM public.invite_links;
    DELETE FROM public.events;
    DELETE FROM public.stripe_connect_accounts;
    DELETE FROM public.users;
    -- auth.usersは別途テストコードで管理
    RAISE NOTICE 'Test data cleanup completed for all public tables.';
END;
$$;
GRANT EXECUTE ON FUNCTION public.cleanup_test_tables_dev_only() TO service_role;

-- 孤立ユーザー検出関数 (30日以上活動のないユーザー)
CREATE OR REPLACE FUNCTION public.detect_orphaned_users()
RETURNS TABLE(user_id UUID, email TEXT, days_since_creation INTEGER)
LANGUAGE plpgsql SECURITY DEFINER AS $$
BEGIN
    RETURN QUERY
    SELECT u.id, au.email, EXTRACT(DAYS FROM NOW() - u.created_at)::INTEGER
    FROM public.users u
    JOIN auth.users au ON u.id = au.id
    WHERE u.created_at < NOW() - INTERVAL '30 days'
      AND NOT EXISTS(SELECT 1 FROM public.events WHERE created_by = u.id);
END;
$$;
GRANT EXECUTE ON FUNCTION public.detect_orphaned_users() TO service_role;

-- セキュリティイベント記録関数
CREATE OR REPLACE FUNCTION public.log_security_event(p_event_type TEXT, p_details JSONB)
RETURNS VOID LANGUAGE plpgsql SECURITY DEFINER AS $$
BEGIN
    INSERT INTO public.security_audit_log (event_type, details, user_role, ip_address)
    VALUES (p_event_type, p_details, auth.role(), inet_client_addr());
EXCEPTION WHEN OTHERS THEN
    RAISE WARNING 'Failed to log security event: %', SQLERRM;
END;
$$;
GRANT EXECUTE ON FUNCTION public.log_security_event(TEXT, JSONB) TO authenticated, service_role;

-- ====================================================================
-- 6. Row Level Security (RLS) ポリシー
-- ====================================================================

-- users: 自分の情報のみアクセス可能
CREATE POLICY "Users can view own profile" ON public.users FOR SELECT TO authenticated USING (auth.uid() = id);
CREATE POLICY "Users can update own profile" ON public.users FOR UPDATE TO authenticated USING (auth.uid() = id) WITH CHECK (auth.uid() = id);
-- INSERT/DELETEはサーバーサイドからのみ (authフック経由)

-- events: 誰でも閲覧可能、作成者のみ管理可能
CREATE POLICY "Anyone can view events" ON public.events FOR SELECT TO anon, authenticated USING (true);
CREATE POLICY "Creators can manage own events" ON public.events FOR ALL TO authenticated USING (auth.uid() = created_by) WITH CHECK (auth.uid() = created_by);

-- attendances: 関係者のみ閲覧可能、書き込みはサーバーサイドのみ
CREATE POLICY "Related parties can view attendances" ON public.attendances FOR SELECT TO authenticated USING (
    EXISTS (SELECT 1 FROM public.events WHERE id = attendances.event_id AND created_by = auth.uid())
);
-- Service role can manage attendances (Server Actions用)
CREATE POLICY "Service role can manage attendances"
ON public.attendances
FOR ALL
TO service_role
USING (true)
WITH CHECK (true);
-- 🚨 INSERT/UPDATE/DELETEポリシーは意図的に作成しない (サーバーサイドAPI経由を強制)

-- payments: 関係者のみ閲覧可能、書き込みはサーバーサイドのみ
CREATE POLICY "Creators can view payments" ON public.payments FOR SELECT TO authenticated USING (
    EXISTS (SELECT 1 FROM public.attendances a JOIN public.events e ON a.event_id = e.id WHERE a.id = payments.attendance_id AND e.created_by = auth.uid())
);
CREATE POLICY "Service role can manage payments" ON public.payments FOR ALL TO service_role USING (true) WITH CHECK (true);

-- stripe_connect_accounts & payouts: 自分 or service_roleのみ管理可能
CREATE POLICY "Users can manage own stripe accounts" ON public.stripe_connect_accounts FOR ALL TO authenticated USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can view own payouts" ON public.payouts FOR SELECT TO authenticated USING (auth.uid() = user_id);
CREATE POLICY "Service role can manage stripe/payout info" ON public.stripe_connect_accounts FOR ALL TO service_role USING (true) WITH CHECK (true);
CREATE POLICY "Service role can manage payouts" ON public.payouts FOR ALL TO service_role USING (true) WITH CHECK (true);

-- invite_links: 作成者のみ管理可能、誰でも有効なリンクは閲覧可能
CREATE POLICY "Creators can manage invite links" ON public.invite_links FOR ALL TO authenticated
    USING (EXISTS (SELECT 1 FROM public.events WHERE id = invite_links.event_id AND created_by = auth.uid()))
    WITH CHECK (EXISTS (SELECT 1 FROM public.events WHERE id = invite_links.event_id AND created_by = auth.uid()));
CREATE POLICY "Anyone can view valid invite links" ON public.invite_links FOR SELECT TO anon, authenticated
    USING (expires_at > NOW() AND (max_uses IS NULL OR current_uses < max_uses));

-- システム・セキュリティログ: service_roleのみアクセス可能
CREATE POLICY "Service role can access system logs" ON public.system_logs FOR ALL TO service_role USING (true);
CREATE POLICY "Service role can access security logs" ON public.security_audit_log FOR ALL TO service_role USING (true);

-- ====================================================================
-- 7. 権限設定
-- ====================================================================
GRANT ALL ON public.system_logs TO service_role;
GRANT USAGE, SELECT ON SEQUENCE public.system_logs_id_seq TO service_role;
GRANT ALL ON public.security_audit_log TO service_role;
GRANT USAGE, SELECT ON SEQUENCE public.security_audit_log_id_seq TO service_role;

DO $$
BEGIN
    RAISE NOTICE '✅ Consolidated schema, RLS, and all functions created successfully.';
END $$;
